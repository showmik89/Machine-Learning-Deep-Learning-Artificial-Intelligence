# -*- coding: utf-8 -*-
"""logistic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Zz8rLOJZlBXpRmTkrVaCi2Cr_TotVdwL
"""

# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import precision_score, recall_score, f1_score, confusion_matrix, accuracy_score
from sklearn.feature_extraction.text import TfidfVectorizer

# Load your dataset (replace 'your_dataset.csv' with the actual file path)
df = pd.read_csv('AI_Content_Detection - Binary_Classification.csv')

# Separate features (X) and target (y)
X = df['content']
y = df['class']

# Split the data into training and testing sets (adjust test_size as needed)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the TF-IDF vectorizer for text preprocessing
tfidf_vectorizer = TfidfVectorizer(max_features=1000)  # You can adjust the number of features as needed

# Transform the text data into numerical features
X_train_tfidf = tfidf_vectorizer.fit_transform(X_train)
X_test_tfidf = tfidf_vectorizer.transform(X_test)

# Create and train a Logistic Regression model
logistic_model = LogisticRegression()
logistic_model.fit(X_train_tfidf, y_train)

# Predict the classes for the test set
logistic_predictions = logistic_model.predict(X_test_tfidf)

# Calculate and display testing accuracy
accuracy = accuracy_score(y_test, logistic_predictions)
print("Logistic Regression Testing Accuracy:", accuracy)

# Calculate and display precision, recall, and F1-score
precision = precision_score(y_test, logistic_predictions)
recall = recall_score(y_test, logistic_predictions)
f1 = f1_score(y_test, logistic_predictions)
print("Precision:", precision)
print("Recall:", recall)
print("F1 Score:", f1)

# Generate and display the confusion matrix
confusion = confusion_matrix(y_test, logistic_predictions)
print("Confusion Matrix:")
print(confusion)